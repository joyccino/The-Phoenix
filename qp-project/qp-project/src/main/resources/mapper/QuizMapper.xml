<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- SQL문과 resultMap을 포함한 Mybatis XML 설정파일의 내용 -->
<mapper namespace="com.phoenix.qpproject.mapper.QuizMapper">

    <!-- resultMap 설정 -->
    <resultMap type="com.phoenix.qpproject.dto.QuizzesDTO" id="QuizDashboardMap">
        <id column="id" property="quizzesId"/>
        <result column="memberId" property="quizzesMemberId"/>
        <result column="title" property="quizzesTitle"/>
        <result column="subjectId" property="quizzesSubjectId"/>
        <result column="quizCreateDateTime" property="quizzesQuizCreateDateTime"/>
        <result column="totalQuestions" property="quizzesTotalQuestions"/>
        <result column="shuffleQuestions" property="quizzesShuffleQuestions"/>
        <result column="shuffleOptions" property="quizzesShuffleOptions"/>
        <result column="allowedAttempts" property="quizzesAllowedAttempts"/>
        <result column="examStartDateTime" property="quizzesExamStartDateTime"/>
        <result column="examEndDateTime" property="quizzesExamEndDateTime"/>
        <result column="totalExaminee" property="quizzesTotalExaminee"/>
        <association property="quizHistoryDTO" resultMap="quizHistoryResultMap"/>
        <association property="membersDTO" resultMap="membersResultMap"/>
    </resultMap>

    <resultMap type="com.phoenix.qpproject.dto.QuizzesDTO" id="QuizListMap">
        <id column="id" property="quizzesId"/>
        <result column="memberId" property="quizzesMemberId"/>
        <result column="title" property="quizzesTitle"/>
        <result column="subjectId" property="quizzesSubjectId"/>
        <result column="quizCreateDateTime" property="quizzesQuizCreateDateTime"/>
        <result column="shuffleQuestions" property="quizzesShuffleQuestions"/>
        <result column="shuffleOptions" property="quizzesShuffleOptions"/>
        <result column="allowedAttempts" property="quizzesAllowedAttempts"/>
        <result column="examStartDateTime" property="quizzesExamStartDateTime"/>
        <result column="examEndDateTime" property="quizzesExamEndDateTime"/>
        <association property="subjectsDTO" resultMap="subjectsResultMap"/>
        <association property="membersDTO" resultMap="membersResultMap"/>
    </resultMap>

    <resultMap type="com.phoenix.qpproject.dto.SubjectsDTO" id="subjectsResultMap">
        <id column="id" property="subjectId"/>
        <result column="institutionLevel" property="subjectInstitutionLevel"/>
        <result column="year" property="subjectYear"/>
        <result column="generalSubject" property="subjectGeneralSubject"/>
        <result column="detailSubject" property="subjectDetailSubject"/>
        <result column="subjectCode" property="subjectSubjectCode"/>
    </resultMap>

    <resultMap type="com.phoenix.qpproject.dto.QuizHistoryDTO" id="quizHistoryResultMap">
        <id column="id" property="quizHistoryId"/>
        <result column="memberId" property="quizHistoryMemberId"/>
        <result column="quizId" property="quizHistoryQuizId"/>
        <result column="startDateTime" property="quizHistoryStartDateTime"/>
        <result column="endDateTime" property="quizHistoryEndDateTime"/>
        <result column="grade" property="quizHistoryGrade"/>
    </resultMap>

    <resultMap type="com.phoenix.qpproject.dto.MembersDTO" id="membersResultMap">
        <id column="id" property="Id"/>
        <result column="email" property="memberEmail"/>
        <result column="surname" property="memberSurname"/>
        <result column="firstname" property="memberFirstname"/>
        <result column="birthDate" property="memberBDate"/>
        <result column="registerDate" property="memberRegDate"/>
        <result column="gender" property="memberGender"/>
        <result column="memberTypeId" property="memberMemberTypeId"/>
        <result column="institutionId" property="memberInstitutionId"/>
        <result column="membershipExpirationDate" property="memberMembershipDate"/>
        <result column="country" property="memberCountry"/>
        <result column="city" property="memberCity"/>
        <result column="majorId" property="memberMajorId"/>
        <result column="grade" property="memberGrade"/>
        <result column="password" property="memberPw"/>
        <result column="userId" property="memberId"/>
        <result column="accessCount" property="accessCount"/>
    </resultMap>

    <!-- SQL문 설정 -->
    <select id="getQuizListByMember" resultMap="QuizDashboardMap">
        SELECT *
        FROM quizzes q
        RIGHT JOIN quizhistory qh ON q.id = qh.quizId
        LEFT JOIN members m ON qh.memberId = m.id;
    </select>
    <select id="getQuizList" resultMap="QuizListMap">
        SELECT *
        FROM quizzes q
        RIGHT JOIN subjects s ON q.subjectId = s.id
        LEFT JOIN members m ON q.memberId = m.id;
    </select>
    <select id="getQuiz" parameterType="java.lang.Integer" resultMap="QuizDashboardMap">
        SELECT *
        FROM quizzes q
        WHERE id = #{qid};
    </select>
    <select id="getRecentQuizIdOfMember" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT
        q.id
        FROM quizzes q
        WHERE memberId = #{memberId} AND id=(
        SELECT max(id) FROM quizzes
        );
    </select>

    <insert id="addQuiz" parameterType="com.phoenix.qpproject.dto.QuizzesDTO">
        /* 회원가입 */
        INSERT INTO quizzes
        (	  memberId,
        title,
        subjectId,
        quizCreateDateTime,
        ShuffleQuestions,
        ShuffleOptions,
        allowedAttempts
        )VALUES (
        #{quizzesMemberId}
        , #{quizzesTitle}
        , 192
        , NOW()
        , #{quizzesShuffleQuestions}
        , #{quizzesShuffleOptions}
        , #{quizzesAllowedAttempts}
        );
    </insert>

    <insert id="addQuestion" parameterType="com.phoenix.qpproject.dto.QuestionsDTO">
        /* 회원가입 */
        INSERT INTO questions
        (	  quizId,
        question,
        questionType
        )VALUES (
        #{questionsQuizId}
        , #{questionsQuestion}
        , #{questionQuestionType}
        );
    </insert>

    <select id="getRecentQuestionIdOfQuiz" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT MAX(id) FROM questions WHERE quizId = #{quizId};
    </select>

    <insert id="addOptions" parameterType="com.phoenix.qpproject.dto.QuestionOptionsDTO">
        /* 회원가입 */
        INSERT INTO questionOptions
        ( questionId,
        optionContent,
        isAnswer
        )VALUES (
        #{questionOptionQuestionId}
        , #{questionOptionOptionContent}
        , #{questionOptionIsAnswer}
        );
    </insert>

    <select id="getQsWhereQuizId" parameterType="java.lang.Integer" resultType="com.phoenix.qpproject.dto.QuestionsDTO">
        SELECT
        qs.id as questionsId,
        qs.question as questionsQuestion,
        qs.questionType as questionQuestionType
        from questions as qs where quizId = #{quizId};
    </select>

<!--    <insert id="addQuizHistory" parameterType="com.phoenix.qpproject.dto.QuizHistoryDTO">-->
<!--        INSERT INTO quizHistory-->
<!--        (memberId,-->
<!--        quizId,-->
<!--        grade,-->
<!--        startDateTime,-->
<!--        endDateTime-->
<!--        )VALUES (-->
<!--        #{quizHistoryMemberId},-->
<!--        #{quizHistoryQuizId},-->
<!--        99,-->
<!--        #{quizHistoryStartDateTime},-->
<!--        #{quizHistoryEndDateTime}-->
<!--        );-->
<!--    </insert>-->

    <insert id="addQH" parameterType="com.phoenix.qpproject.dto.QuizHistoryDTO">
        INSERT INTO quizHistory
        (memberId,
        quizId,
        grade,
        startDateTime,
        endDateTime
        )VALUES (
        #{quizHistoryMemberId},
        #{quizHistoryQuizId},
        #{quizHistoryGrade},
        #{quizHistoryStartDateTime},
        #{quizHistoryEndDateTime}
        );
    </insert>

    <select id="getRecentQuizHistoryIdOfMember" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT
        q.id
        FROM quizHistory q
        WHERE memberId = #{memberId} AND id=(
        SELECT max(id) FROM quizHistory
        );
    </select>

    <insert id="addQuestionHistory" parameterType="com.phoenix.qpproject.dto.QuestionsHistoryDTO">
        INSERT INTO questionHistory
        (	  quizHistoryId,
        questionId,
        userResponse,
        isCorrected
        )VALUES (
        #{questionsHistoryQuizHistoryId},
        #{questionsHistoryQuestionId},
        #{questionsHistoryUserResponse},
        #{questionsHistoryIsCorrected}
        );
    </insert>

    <select id="getQuizListForHome" resultType="com.phoenix.qpproject.dto.HomeDTO">
        SELECT
        q.Id AS homeQuizId,
        q.title AS quizzesTitle,
        q.totalQuestions AS homeTotalQuestions,
        q.quizCreateDateTime AS homePostedDate,
        q.title AS homeQuizTitle,
        s.detailSubject AS homeDetailSubject,
        m.userId AS homeCreatorId,
        0 as homeIsTaken,
        q.totalExaminee as homeTotalExaminee,
        q.averageScore as homeAverageScore
        FROM quizzes as q
        RIGHT JOIN subjects as s ON q.subjectId = s.id
        LEFT JOIN members as m ON q.memberId = m.id
        WHERE q.title IS NOT NULL AND q.isDeleted = false AND q.totalQuestions > 0
        ORDER BY homePostedDate DESC;
    </select>

    <select id="getQuizDetail" parameterType="java.lang.Integer" resultType="com.phoenix.qpproject.dto.QuizDetailDTO">
        SELECT
        q.id AS quizzesId,
        q.title AS quizzesTitle,
        q.averageScore AS averageScore,
        q.totalQuestions AS totalQuestions,
        q.quizCreateDateTime AS postedDate,

        s.institutionLevel as educationalLevel,
        2 as year,
        s.generalSubject as generalSubject,
        s.detailSubject as detailSubject,

        m.userId as creatorId
        FROM quizzes as q
        RIGHT JOIN subjects as s ON q.subjectId = s.id
        LEFT JOIN members as m ON q.memberId = m.id
        WHERE q.id = #{qid}
    </select>


    <update id="updateTotalQuestions" parameterType="java.lang.Integer">
        UPDATE quizzes SET totalQuestions = #{newTotal} WHERE id = #{quizId};
    </update>

    <update id="updateTotalExaminee" parameterType="java.lang.Integer">
        UPDATE quizzes SET totalExaminee = (select count(*) from quizHistory where quizId = #{quizId})  WHERE id = #{quizId};
    </update>

    <select id="getQuestionOptionsByQuizId" parameterType="java.lang.Integer" resultType="com.phoenix.qpproject.dto.ResultsDTO">
        select questionId as resultQuestionId, optionContent as resultOptionContent, isAnswer as resultIsAnswer from questionOptions as qo join questions as q on q.id = qo.questionId where q.quizId = #{quizId} AND qo.isAnswer = true;
    </select>

    <update id="updateUserScore" parameterType="java.lang.Integer">
        UPDATE quizHistory SET grade = #{grade} WHERE id = #{quizHistoryId};
    </update>

    <update id="updateAverageScore" parameterType="java.lang.Integer">
        UPDATE quizzes SET averageScore = #{averageScore} WHERE id = #{quizId};
    </update>

    <update id="quizDelete" parameterType="java.lang.Integer">
        UPDATE quizzes SET isDeleted = true WHERE id = #{quizId};
    </update>

    <select id="getAverageScore" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select AVG(grade) from quizzes join quizHistory on quizzes.id = quizHistory.quizId where quizzes.id = #{quizId};
    </select>

    <select id="getHistoryOfUser" parameterType="java.lang.Integer" resultType="com.phoenix.qpproject.dto.HistoryDTO">
       select
        quizHistory.endDateTime AS historySubmittedDate,
        quizHistory.grade AS historyGrade
        from quizHistory
        where quizId = #{qId} and memberId = #{userId};
    </select>




    <select id="getMainQuizList" resultType="com.phoenix.qpproject.dto.HomeDTO">
        SELECT
        q.Id AS homeQuizId,
        q.totalQuestions AS homeTotalQuestions,
        q.quizCreateDateTime AS homePostedDate,
        q.title AS homeQuizTitle,
        m.userId AS homeCreatorId,
        0 as homeIsTaken,
        q.totalExaminee as homeTotalExaminee,
        q.averageScore as homeAverageScore
        FROM quizzes as q
        LEFT JOIN members as m ON q.memberId = m.id
        WHERE q.title IS NOT NULL
        ORDER BY q.${orderBy};
    </select>




</mapper>